// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int maxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int max) {
        if (max < 0) {
            do Sys.error(14);
        }
    
        if (max = 0) {
            let max = 1;
        }
    
        let str = Array.new(max);
        let length = 0;
        let maxLength = max;
    
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (str = null) {
            // Do nothing
        }
        else {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLength) {
            do Sys.error(17);
        }
        
        let str[length] = c;
        let length = length + 1;
        
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        if(length < 0)
        {
            do Sys.error(18);
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean negative;
        
        let val = 0;
        let i = 0;
        let negative = false;
        
        if ((length > 0) & (str[0] = 45)) {
            let negative = true;
            let i = 1;
        }
        
        while ((i < length) & (str[i] > 47) & (str[i] < 58)) {
            let d = str[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }
        
        if (negative) {
            return -val;
        }
        else {
            return val;
        }
    }

    method void setIntWorker(int number) {
        var int lastDigit;
        var int restOfNum;
    
        if (number = 0) {
            return;
        }
    
        let restOfNum = number / 10;
        let lastDigit = number - (restOfNum * 10);
        do setIntWorker(restOfNum);
        do appendChar(lastDigit + 48);
        return;
    }
    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
    
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }
    
        // Handle special case of 0
        if (val = 0) {
            do appendChar(48);
            return;
        }
    
        do setIntWorker(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
